{"version":3,"sources":["components/Cell.js","components/Row.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","onChange","e","setState","value","target","display","determineDisplay","x","y","onKeyPressOnInput","key","hasNewValue","onBlur","handleUnselectAll","state","selected","editing","onChangedValue","emitUnselectAllEvent","unselectAllEvent","Event","window","document","dispatchEvent","clicked","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","fontFamily","backgroundColor","fontWeight","addEventListener","this","removeEventListener","outlineColor","outlineStyle","style","type","onKeyPress","autoFocus","id","onClick","role","React","Component","Row","cells","push","handleChangedCell","updateCells","rowData","Table","modifiedData","Object","assign","data","forceUpdate","table_data_string","JSON","parse","html","txt","createElement","innerHTML","decodeHTML","col","row","handleChange","bind","handleSubmit","handleAddRow","event","preventDefault","rows","onSubmit","placeholder","token","a","numRows","numCols","testing","fetch","method","headers","body","stringify","ok","console","log","defaultProps","saveToLocalStorage","App","parseInt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.7cb17c03.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * Cell represents the atomic element of a table\n */\nexport default class Cell extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editing: false,\n            value: props.value,\n\n        }\n        this.display = this.determineDisplay(\n            { x: props.x, y: props.y },\n            props.value\n        )\n    }\n\n    /**\n     * Add listener to the `unselectAll` event used to broadcast the\n     * unselect all event\n     */\n    componentDidMount() {\n        window.document.addEventListener('unselectAll',\n            this.handleUnselectAll)\n    }\n\n    /**\n     * Remove the `unselectAll` event listener added in\n     * `componentDidMount()`\n     */\n    componentWillUnmount() {\n        window.document.removeEventListener('unselectAll',\n            this.handleUnselectAll)\n    }\n\n    /**\n     * When a Cell value changes, re-determine the display value\n     * by calling the formula calculation\n     *\n     * Here we can calculate whether the value is if correct type\n     */\n    onChange = (e) => {\n\n        this.setState({ value: e.target.value })\n        // Check type and if e.target.value matches type, continue with below two lines. Else, give error message\n        this.display = this.determineDisplay(\n            { x: this.props.x, y: this.props.y }, e.target.value)\n    }\n\n    /**\n     * Handle pressing a key when the Cell is an input element\n     */\n    onKeyPressOnInput = (e) => {\n        if (e.key === 'Enter') {\n            this.hasNewValue(e.target.value)\n        }\n    }\n\n    /**\n     * Handle moving away from a cell, stores the new value\n     */\n    onBlur = (e) => {\n        this.hasNewValue(e.target.value)\n    }\n\n    /**\n     * Used by `componentDid(Un)Mount`, handles the `unselectAll`\n     * event response\n     */\n    handleUnselectAll = () => {\n        if (this.state.selected || this.state.editing) {\n            this.setState({ selected: false, editing: false })\n        }\n    }\n\n    /**\n     * Called by the `onBlur` or `onKeyPressOnInput` event handlers,\n     * it escalates the value changed event, and restore the editing\n     * state to `false`.\n     */\n    hasNewValue = (value) => {\n        this.props.onChangedValue(\n            {\n                x: this.props.x,\n                y: this.props.y,\n            },\n            value,\n        )\n        this.setState({ editing: false })\n    }\n\n    /**\n     * Emits the `unselectAll` event, used to tell all the other\n     * cells to unselect\n     */\n    emitUnselectAllEvent = () => {\n        const unselectAllEvent = new Event('unselectAll')\n        window.document.dispatchEvent(unselectAllEvent)\n    }\n\n\n    /**\n     * Handle clicking a Cell.\n     */\n    clicked = () => {\n        this.emitUnselectAllEvent()\n        this.setState({ editing: true, selected: true })\n\n    }\n\n    determineDisplay = ({ x, y }, value) => {\n        return value\n    }\n\n    /**\n     * Calculates a cell's CSS values\n     */\n    calculateCss = () => {\n        const css = {\n            width: '80px',\n            padding: '4px',\n            margin: '0',\n            height: '25px',\n            boxSizing: 'border-box',\n            position: 'relative',\n            display: 'inline-block',\n            color: 'black',\n            border: '1px solid #cacaca',\n            textAlign: 'left',\n            verticalAlign: 'top',\n            fontSize: '14px',\n            lineHeight: '15px',\n            overflow: 'hidden',\n            fontFamily: 'Calibri, \\'Segoe UI\\', Thonburi, Arial, Verdana, sans-serif',\n        }\n\n        if (this.props.y === 0) {\n            css.textAlign = 'center'\n            css.backgroundColor = '#f0f0f0'\n            css.fontWeight = 'bold'\n        }\n\n        return css\n    }\n\n    render() {\n        const css = this.calculateCss()\n\n        if (this.state.selected) {\n            css.outlineColor = 'lightblue'\n            css.outlineStyle = 'dotted'\n        }\n\n        if (this.state.editing) {\n            return (\n                <input\n                    style={css}\n                    type=\"text\"\n                    onBlur={this.onBlur}\n                    onKeyPress={this.onKeyPressOnInput}\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    autoFocus\n                />\n            )\n        }\n\n\n        return (\n            <span\n                id={'main_table'}\n                onClick={e => this.clicked(e)}\n                style={css}\n                role=\"presentation\"\n            >\n        {this.display}\n      </span>\n\n        )\n    }\n}\n\nCell.propTypes = {\n    onChangedValue: PropTypes.func.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    value: PropTypes.string.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\n\n/**\n * Row is an array of cells which gets passed to create the Table\n */\n\nconst Row = (props) => {\n\n    const cells = []\n    const y = props.y\n    for (let x = 0; x < props.x; x += 1) {\n        cells.push(\n            <Cell\n                key={`${x}-${y}`}\n                y={y}\n                x={x}\n                onChangedValue={props.handleChangedCell}\n                updateCells={props.updateCells}\n                value={props.rowData[x] || ''}\n            />,\n        )\n    }\n    return (\n        <div>\n            {cells}\n        </div>\n    )\n}\n\nRow.propTypes = {\n    handleChangedCell: PropTypes.func.isRequired,\n    updateCells: PropTypes.func.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    rowData: PropTypes.shape({\n        string: PropTypes.string,\n    }).isRequired,\n}\n\nexport default Row","import React from 'react';\nimport PropTypes from 'prop-types'\nimport Row from './Row'\n\nexport default class Table extends React.Component {\n    constructor(props) {\n        super(props)\n\n        if (window.table_data_string) {\n            var decodeHTML = function (html){\n                var txt = document.createElement('textarea');\n                txt.innerHTML = html;\n                return txt.value;\n            };\n\n            this.state = {\n                data: JSON.parse(decodeHTML(window.table_data_string)),\n                col: this.props.y,\n                row: this.props.x\n            }}\n        else{\n            this.state = {\n                data: {},\n                col: this.props.y,\n                row: this.props.x\n            }}\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleAddRow = this.handleAddRow.bind(this);\n    }\n\n    handleChangedCell = ({ x, y }, value) => {\n        const modifiedData = Object.assign({}, this.state.data)\n        if (!modifiedData[y]) modifiedData[y] = {}\n        modifiedData[y][x] = value\n        this.setState({ data: modifiedData })\n\n    }\n\n    updateCells = () => {\n        this.forceUpdate()\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.setState({y: this.state.col += 1})\n    }\n\n    handleAddRow(event) {\n            event.preventDefault()\n            this.setState({x: this.state.row += 1})\n        }\n\n        /**\n            * Render handles saving the table to the database\n        */\n\n    render() {\n        const rows = []\n        for (let y = 0; y < this.state.row + 1; y += 1) {\n            const rowData = this.state.data[y] || {}\n            rows.push(\n                <Row\n                    handleChangedCell={this.handleChangedCell}\n                    updateCells={this.updateCells}\n                    handleSubmit = {this.handleSubmit}\n                    key={y}\n                    y={y}\n                    x={this.state.col}\n                    rowData={rowData}\n                />,\n            )\n        }\n\n        return (\n\n            <div>\n                {rows}\n                <form onSubmit={this.handleSubmit}>\n                        <select value={this.state.value} onChange={this.handleChange}>\n                            <option selected placeholder= \"new col\"> Select Type </option>\n                            <option value= \"string\"> String </option>\n                            <option value= \"integer\"> Integer</option>\n                        </select>\n                    <input type=\"submit\" value=\"Add New Column\" />\n                </form>\n                <form onSubmit={this.handleAddRow}>\n                    <input type=\"submit\" value=\"Add New Row\" />\n                </form>\n\n                <label> Your sheet ID is: {window.token} </label>\n\n                <button onClick={async () =>{\n                    const modifiedData = this.state.data\n                    const numRows = this.state.row\n                    const numCols = this.state.col\n                    const testing = {modifiedData, numRows, numCols}\n                    const response = await fetch(\"/\" + window.token, {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify(testing)\n                    });\n\n                    if (response.ok) {\n                        console.log(\"spreadsheet saving worked!\");\n\n                    }                }}>\n                    Save\n                </button>\n\n            </div>\n        )\n    }\n}\n\nTable.propTypes = {\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    id: PropTypes.string,\n    saveToLocalStorage: PropTypes.bool\n}\n\nTable.defaultProps = {\n  saveToLocalStorage: true,\n  id: 'default'\n}","import React from 'react';\nimport './App.css';\nimport Table from \"./components/Table\";\n\n\nconst App = () =>\n\n    (<div style={{ width: 'max-content' }}>\n      <Table x={parseInt(window.numRows)} y={parseInt(window.numCols)} id={window.token} />\n    </div> )\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}